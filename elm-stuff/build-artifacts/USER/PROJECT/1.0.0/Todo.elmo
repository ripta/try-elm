Elm.Todo = Elm.Todo || {};
Elm.Todo.make = function (_elm) {
   "use strict";
   _elm.Todo = _elm.Todo || {};
   if (_elm.Todo.values)
   return _elm.Todo.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Todo",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Lazy = Elm.Html.Lazy.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var getStorage = Elm.Native.Port.make(_elm).inbound("getStorage",
   "Maybe.Maybe Todo.Model",
   function (v) {
      return v === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v === "object" && "id" in v && "tasks" in v && "field" in v && "visibility" in v ? {_: {}
                                                                                                                                                                             ,id: typeof v.id === "number" ? v.id : _U.badPort("a number",
                                                                                                                                                                             v.id)
                                                                                                                                                                             ,tasks: typeof v.tasks === "object" && v.tasks instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.tasks.map(function (v) {
                                                                                                                                                                                return typeof v === "object" && "description" in v && "isDone" in v && "isEditing" in v && "id" in v ? {_: {}
                                                                                                                                                                                                                                                                                       ,description: typeof v.description === "string" || typeof v.description === "object" && v.description instanceof String ? v.description : _U.badPort("a string",
                                                                                                                                                                                                                                                                                       v.description)
                                                                                                                                                                                                                                                                                       ,isDone: typeof v.isDone === "boolean" ? v.isDone : _U.badPort("a boolean (true or false)",
                                                                                                                                                                                                                                                                                       v.isDone)
                                                                                                                                                                                                                                                                                       ,isEditing: typeof v.isEditing === "boolean" ? v.isEditing : _U.badPort("a boolean (true or false)",
                                                                                                                                                                                                                                                                                       v.isEditing)
                                                                                                                                                                                                                                                                                       ,id: typeof v.id === "number" ? v.id : _U.badPort("a number",
                                                                                                                                                                                                                                                                                       v.id)} : _U.badPort("an object with fields `description`, `isDone`, `isEditing`, `id`",
                                                                                                                                                                                v);
                                                                                                                                                                             })) : _U.badPort("an array",
                                                                                                                                                                             v.tasks)
                                                                                                                                                                             ,field: typeof v.field === "string" || typeof v.field === "object" && v.field instanceof String ? v.field : _U.badPort("a string",
                                                                                                                                                                             v.field)
                                                                                                                                                                             ,visibility: typeof v.visibility === "string" || typeof v.visibility === "object" && v.visibility instanceof String ? v.visibility : _U.badPort("a string",
                                                                                                                                                                             v.visibility)} : _U.badPort("an object with fields `id`, `tasks`, `field`, `visibility`",
      v));
   });
   var infoFooter = A2($Html.footer,
   _L.fromArray([$Html$Attributes.id("info")]),
   _L.fromArray([A2($Html.p,
                _L.fromArray([]),
                _L.fromArray([$Html.text("Double-click to edit")]))
                ,A2($Html.p,
                _L.fromArray([]),
                _L.fromArray([$Html.text("Part of http://todomvc.com")]))]));
   var is13 = function (code) {
      return _U.eq(code,
      13) ? $Result.Ok({ctor: "_Tuple0"}) : $Result.Err("not Enter");
   };
   var onEnter = F2(function (address,
   value) {
      return A3($Html$Events.on,
      "keydown",
      A2($Json$Decode.customDecoder,
      $Html$Events.keyCode,
      is13),
      function (_v0) {
         return function () {
            return A2($Signal.message,
            address,
            value);
         }();
      });
   });
   var UpdateVisibility = function (a) {
      return {ctor: "UpdateVisibility"
             ,_0: a};
   };
   var visibilitySwap = F4(function (address,
   uri,
   visibility,
   actual) {
      return A2($Html.li,
      _L.fromArray([A2($Html$Events.onClick,
      address,
      UpdateVisibility(visibility))]),
      _L.fromArray([A2($Html.a,
      _L.fromArray([$Html$Attributes.href(uri)
                   ,$Html$Attributes.classList(_L.fromArray([{ctor: "_Tuple2"
                                                             ,_0: "selected"
                                                             ,_1: _U.eq(visibility,
                                                             actual)}]))]),
      _L.fromArray([$Html.text(visibility)]))]));
   });
   var MarkAll = function (a) {
      return {ctor: "MarkAll"
             ,_0: a};
   };
   var Mark = F2(function (a,b) {
      return {ctor: "Mark"
             ,_0: a
             ,_1: b};
   });
   var DeleteDoneTasks = {ctor: "DeleteDoneTasks"};
   var controls = F3(function (address,
   visibility,
   tasks) {
      return function () {
         var tasksDone = $List.length(A2($List.filter,
         function (_) {
            return _.isDone;
         },
         tasks));
         var tasksLeft = $List.length(tasks) - tasksDone;
         var item_ = _U.eq(tasksLeft,
         1) ? " item" : " items";
         return A2($Html.footer,
         _L.fromArray([$Html$Attributes.id("footer")
                      ,$Html$Attributes.hidden($List.isEmpty(tasks))]),
         _L.fromArray([A2($Html.span,
                      _L.fromArray([$Html$Attributes.id("todo-count")]),
                      _L.fromArray([A2($Html.strong,
                                   _L.fromArray([]),
                                   _L.fromArray([$Html.text($Basics.toString(tasksLeft))]))
                                   ,$Html.text(A2($Basics._op["++"],
                                   item_,
                                   " left"))]))
                      ,A2($Html.ul,
                      _L.fromArray([$Html$Attributes.id("filters")]),
                      _L.fromArray([A4(visibilitySwap,
                                   address,
                                   "#/",
                                   "All",
                                   visibility)
                                   ,$Html.text(" ")
                                   ,A4(visibilitySwap,
                                   address,
                                   "#/active",
                                   "Active",
                                   visibility)
                                   ,$Html.text(" ")
                                   ,A4(visibilitySwap,
                                   address,
                                   "#/done",
                                   "Done",
                                   visibility)]))
                      ,A2($Html.button,
                      _L.fromArray([$Html$Attributes.$class("clear-done")
                                   ,$Html$Attributes.id("clear_done")
                                   ,$Html$Attributes.hidden(_U.eq(tasksDone,
                                   0))
                                   ,A2($Html$Events.onClick,
                                   address,
                                   DeleteDoneTasks)]),
                      _L.fromArray([$Html.text(A2($Basics._op["++"],
                      "Clear done (",
                      A2($Basics._op["++"],
                      $Basics.toString(tasksDone),
                      ")")))]))]));
      }();
   });
   var DeleteTask = function (a) {
      return {ctor: "DeleteTask"
             ,_0: a};
   };
   var AddTask = {ctor: "AddTask"};
   var UpdateTask = F2(function (a,
   b) {
      return {ctor: "UpdateTask"
             ,_0: a
             ,_1: b};
   });
   var EditTask = F2(function (a,
   b) {
      return {ctor: "EditTask"
             ,_0: a
             ,_1: b};
   });
   var todoItem = F2(function (address,
   todo) {
      return A2($Html.li,
      _L.fromArray([$Html$Attributes.classList(_L.fromArray([{ctor: "_Tuple2"
                                                             ,_0: "done"
                                                             ,_1: todo.isDone}
                                                            ,{ctor: "_Tuple2"
                                                             ,_0: "editing"
                                                             ,_1: todo.isEditing}]))]),
      _L.fromArray([A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("view")]),
                   _L.fromArray([A2($Html.input,
                                _L.fromArray([$Html$Attributes.$class("toggle")
                                             ,$Html$Attributes.type$("checkbox")
                                             ,$Html$Attributes.checked(todo.isDone)
                                             ,A2($Html$Events.onClick,
                                             address,
                                             A2(Mark,
                                             todo.id,
                                             $Basics.not(todo.isDone)))]),
                                _L.fromArray([]))
                                ,A2($Html.label,
                                _L.fromArray([A2($Html$Events.onDoubleClick,
                                address,
                                A2(EditTask,todo.id,true))]),
                                _L.fromArray([$Html.text(todo.description)]))
                                ,A2($Html.button,
                                _L.fromArray([$Html$Attributes.$class("destroy")
                                             ,A2($Html$Events.onClick,
                                             address,
                                             DeleteTask(todo.id))]),
                                _L.fromArray([]))]))
                   ,A2($Html.input,
                   _L.fromArray([$Html$Attributes.$class("edit")
                                ,$Html$Attributes.value(todo.description)
                                ,$Html$Attributes.name("title")
                                ,$Html$Attributes.id(A2($Basics._op["++"],
                                "todo-",
                                $Basics.toString(todo.id)))
                                ,A3($Html$Events.on,
                                "input",
                                $Html$Events.targetValue,
                                function ($) {
                                   return $Signal.message(address)(UpdateTask(todo.id)($));
                                })
                                ,A2($Html$Events.onBlur,
                                address,
                                A2(EditTask,todo.id,false))
                                ,A2(onEnter,
                                address,
                                A2(EditTask,todo.id,false))]),
                   _L.fromArray([]))]));
   });
   var taskList = F3(function (address,
   visibility,
   tasks) {
      return function () {
         var cssVisibility = $List.isEmpty(tasks) ? "hidden" : "visible";
         var allDone = A2($List.all,
         function (_) {
            return _.isDone;
         },
         tasks);
         var isVisible = function (todo) {
            return function () {
               switch (visibility)
               {case "Active":
                  return $Basics.not(todo.isDone);
                  case "All": return true;
                  case "Done":
                  return todo.isDone;}
               _U.badCase($moduleName,
               "between lines 158 and 162");
            }();
         };
         return A2($Html.section,
         _L.fromArray([$Html$Attributes.id("main")
                      ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                            ,_0: "visibility"
                                                            ,_1: cssVisibility}]))]),
         _L.fromArray([A2($Html.input,
                      _L.fromArray([$Html$Attributes.id("toggle-all")
                                   ,$Html$Attributes.type$("checkbox")
                                   ,$Html$Attributes.name("toggle")
                                   ,$Html$Attributes.checked(allDone)
                                   ,A2($Html$Events.onClick,
                                   address,
                                   MarkAll($Basics.not(allDone)))]),
                      _L.fromArray([]))
                      ,A2($Html.label,
                      _L.fromArray([$Html$Attributes.$for("toggle-all")]),
                      _L.fromArray([$Html.text("Mark all as done")]))
                      ,A2($Html.ul,
                      _L.fromArray([$Html$Attributes.id("todo-list")]),
                      A2($List.map,
                      todoItem(address),
                      A2($List.filter,
                      isVisible,
                      tasks)))]));
      }();
   });
   var UpdateField = function (a) {
      return {ctor: "UpdateField"
             ,_0: a};
   };
   var taskEntry = F2(function (address,
   task) {
      return A2($Html.header,
      _L.fromArray([$Html$Attributes.id("header")]),
      _L.fromArray([A2($Html.h1,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text("todos")]))
                   ,A2($Html.input,
                   _L.fromArray([$Html$Attributes.id("new-todo")
                                ,$Html$Attributes.placeholder("What do you need to do?")
                                ,$Html$Attributes.autofocus(true)
                                ,$Html$Attributes.value(task)
                                ,$Html$Attributes.name("newTodo")
                                ,A3($Html$Events.on,
                                "input",
                                $Html$Events.targetValue,
                                function ($) {
                                   return $Signal.message(address)(UpdateField($));
                                })
                                ,A2(onEnter,address,AddTask)]),
                   _L.fromArray([]))]));
   });
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("todo-app-wrapper")
                   ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: "visibility"
                                                         ,_1: "hidden"}]))]),
      _L.fromArray([A2($Html.section,
                   _L.fromArray([$Html$Attributes.id("todo_app")]),
                   _L.fromArray([A3($Html$Lazy.lazy2,
                                taskEntry,
                                address,
                                model.field)
                                ,A4($Html$Lazy.lazy3,
                                taskList,
                                address,
                                model.visibility,
                                model.tasks)
                                ,A4($Html$Lazy.lazy3,
                                controls,
                                address,
                                model.visibility,
                                model.tasks)]))
                   ,infoFooter]));
   });
   var Noop = {ctor: "Noop"};
   var actions = $Signal.mailbox(Noop);
   var focus = Elm.Native.Port.make(_elm).outboundSignal("focus",
   function (v) {
      return v;
   },
   function () {
      var toSelector = function (_v3) {
         return function () {
            switch (_v3.ctor)
            {case "EditTask":
               return A2($Basics._op["++"],
                 "#todo-",
                 $Basics.toString(_v3._0));}
            _U.badCase($moduleName,
            "on line 304, column 35 to 58");
         }();
      };
      var needsFocus = function (action) {
         return function () {
            switch (action.ctor)
            {case "EditTask":
               return action._1;}
            return false;
         }();
      };
      return $Signal.map(toSelector)(A2($Signal.filter,
      needsFocus,
      A2(EditTask,
      0,
      true))(actions.signal));
   }());
   var emptyModel = {_: {}
                    ,field: ""
                    ,id: 0
                    ,tasks: _L.fromArray([])
                    ,visibility: "All"};
   var initialModel = A2($Maybe.withDefault,
   emptyModel,
   getStorage);
   var task = function (_v10) {
      return function () {
         switch (_v10.ctor)
         {case "_Tuple2": return {_: {}
                                 ,description: _v10._0
                                 ,id: _v10._1
                                 ,isDone: false
                                 ,isEditing: false};}
         _U.badCase($moduleName,
         "between lines 26 and 29");
      }();
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "AddTask":
            return _U.replace([["id"
                               ,model.id + 1]
                              ,["field",""]
                              ,["tasks"
                               ,$String.isEmpty(model.field) ? model.tasks : A2($Basics._op["++"],
                               model.tasks,
                               _L.fromArray([task({ctor: "_Tuple2"
                                                  ,_0: model.field
                                                  ,_1: model.id})]))]],
              model);
            case "DeleteDoneTasks":
            return function () {
                 var matcher = function (t) {
                    return $Basics.not(t.isDone);
                 };
                 return _U.replace([["tasks"
                                    ,A2($List.filter,
                                    matcher,
                                    model.tasks)]],
                 model);
              }();
            case "DeleteTask":
            return function () {
                 var matcher = function (t) {
                    return !_U.eq(t.id,
                    action._0);
                 };
                 return _U.replace([["tasks"
                                    ,A2($List.filter,
                                    matcher,
                                    model.tasks)]],
                 model);
              }();
            case "EditTask":
            return function () {
                 var update = function (t) {
                    return _U.eq(t.id,
                    action._0) ? _U.replace([["isEditing"
                                             ,action._1]],
                    t) : t;
                 };
                 return _U.replace([["tasks"
                                    ,A2($List.map,
                                    update,
                                    model.tasks)]],
                 model);
              }();
            case "Mark":
            return function () {
                 var update = function (t) {
                    return _U.eq(t.id,
                    action._0) ? _U.replace([["isDone"
                                             ,action._1]],
                    t) : t;
                 };
                 return _U.replace([["tasks"
                                    ,A2($List.map,
                                    update,
                                    model.tasks)]],
                 model);
              }();
            case "MarkAll":
            return function () {
                 var update = function (t) {
                    return _U.replace([["isDone"
                                       ,action._0]],
                    t);
                 };
                 return _U.replace([["tasks"
                                    ,A2($List.map,
                                    update,
                                    model.tasks)]],
                 model);
              }();
            case "Noop": return model;
            case "UpdateField":
            return _U.replace([["field"
                               ,action._0]],
              model);
            case "UpdateTask":
            return function () {
                 var update = function (t) {
                    return _U.eq(t.id,
                    action._0) ? _U.replace([["description"
                                             ,action._1]],
                    t) : t;
                 };
                 return _U.replace([["tasks"
                                    ,A2($List.map,
                                    update,
                                    model.tasks)]],
                 model);
              }();
            case "UpdateVisibility":
            return _U.replace([["visibility"
                               ,action._0]],
              model);}
         _U.badCase($moduleName,
         "between lines 52 and 110");
      }();
   });
   var model = A3($Signal.foldp,
   update,
   initialModel,
   actions.signal);
   var main = $Signal.map(view(actions.address))(model);
   var setStorage = Elm.Native.Port.make(_elm).outboundSignal("setStorage",
   function (v) {
      return {id: v.id
             ,tasks: Elm.Native.List.make(_elm).toArray(v.tasks).map(function (v) {
                return {description: v.description
                       ,isDone: v.isDone
                       ,isEditing: v.isEditing
                       ,id: v.id};
             })
             ,field: v.field
             ,visibility: v.visibility};
   },
   model);
   var Task = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,description: a
             ,id: d
             ,isDone: b
             ,isEditing: c};
   });
   var Model = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,field: c
             ,id: a
             ,tasks: b
             ,visibility: d};
   });
   _elm.Todo.values = {_op: _op
                      ,Model: Model
                      ,Task: Task
                      ,task: task
                      ,emptyModel: emptyModel
                      ,Noop: Noop
                      ,UpdateField: UpdateField
                      ,EditTask: EditTask
                      ,UpdateTask: UpdateTask
                      ,AddTask: AddTask
                      ,DeleteTask: DeleteTask
                      ,DeleteDoneTasks: DeleteDoneTasks
                      ,Mark: Mark
                      ,MarkAll: MarkAll
                      ,UpdateVisibility: UpdateVisibility
                      ,update: update
                      ,view: view
                      ,onEnter: onEnter
                      ,is13: is13
                      ,taskEntry: taskEntry
                      ,taskList: taskList
                      ,todoItem: todoItem
                      ,controls: controls
                      ,visibilitySwap: visibilitySwap
                      ,infoFooter: infoFooter
                      ,main: main
                      ,model: model
                      ,initialModel: initialModel
                      ,actions: actions};
   return _elm.Todo.values;
};